#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <ctype.h>

#define MAX_CMD_LEN 1024

void execute_command(char *cmd_line) {
    char *args[MAX_CMD_LEN];
    int background = 0;

    // Strip leading and trailing spaces
    while (isspace((unsigned char)*cmd_line)) cmd_line++;  // Remove leading spaces
    int len = strlen(cmd_line);
    while (len > 0 && isspace((unsigned char)cmd_line[len - 1])) {
        cmd_line[len - 1] = '\0';  // Remove trailing spaces
        len--;
    }

    // Handle background processes: check if the command ends with '&'
    if (len > 0 && cmd_line[len - 1] == '&') {
        background = 1;
        cmd_line[len - 1] = '\0';  // Remove '&' from the command
    }

    // Split the command into arguments (space separated)
    char *token = strtok(cmd_line, " ");
    int i = 0;
    while (token != NULL) {
        args[i++] = token;
        token = strtok(NULL, " ");
    }
    args[i] = NULL; // Null-terminate the argument list
   
    // If the command is "help"
    if (strcmp(args[0], "help") == 0) {
        printf("Simple shell program\n");
        printf("Supported commands:\n");
        printf("  - help: Show this help message\n");
        printf("  - quit: Exit the shell\n");
        printf("  - pause: Pause the shell until 'Enter' is pressed\n");
        printf("  - cd [DIR]: Change the current directory to DIR\n");
        printf("  - dir [DIR]: List the contents of DIR\n");
        printf("  - set [VARIABLE] [VALUE]: Set the environment variable\n");
        printf("  - echo [STRING]: Print the string to the console\n");
        printf("  - Any other command will be executed as a program\n");
        return;
    }

    // If the command is "quit"
    if (strcmp(args[0], "quit") == 0) {
        exit(0);
    }

    // If the command is "pause"
    if (strcmp(args[0], "pause") == 0) {
        printf("Pausing the shell. Press Enter to continue...\n");
        getchar();  // Wait for Enter key
        return;
    }

    // If the command is "set"
    if (strcmp(args[0], "set") == 0) {
        if (args[1] != NULL && args[2] != NULL) {
            if (setenv(args[1], args[2], 1) == -1) {
                perror("setenv failed");
            } else {
                printf("Environment variable %s set to %s\n", args[1], args[2]);
            }
        } else {
            printf("Usage: set VARIABLE VALUE\n");
        }
        return;
    }

    // Fork a child process to execute the command
    pid_t pid = fork();
   
    if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("execvp failed");
            exit(1);
        }
    } else if (pid > 0) {
        // Parent process
        if (!background) {
            // Wait for the child process if it's not in the background
            wait(NULL);
        } else {
            // If in background, do not wait, return to prompt immediately
            printf("Background process with PID %d started.\n", pid);
        }
    } else {
        // Fork failed
        perror("fork failed");
    }
}

void process_batch_file(FILE *batch_file) {
    char cmd_line[MAX_CMD_LEN];

    while (fgets(cmd_line, sizeof(cmd_line), batch_file) != NULL) {
        // Remove newline character
        cmd_line[strcspn(cmd_line, "\n")] = 0;
        // Skip empty lines
        if (strlen(cmd_line) == 0) continue;

        // Execute the command
        execute_command(cmd_line);
    }
}

int main(int argc, char *argv[]) {
    char cmd_line[MAX_CMD_LEN];

    // If batch file is provided as argument, process it
    if (argc > 1) {
        FILE *batch_file = fopen(argv[1], "r");
        if (batch_file == NULL) {
            perror("Failed to open batch file");
            exit(1);
        }
        process_batch_file(batch_file);
        fclose(batch_file);
        return 0;  // Exit after batch file is processed
    }

    // Otherwise, continue interactive mode
    while (1) {
        // Get the current working directory
        char cwd[MAX_CMD_LEN];
        if (getcwd(cwd, sizeof(cwd)) == NULL) {
            perror("getcwd failed");
            exit(1);
        }

        // Display the prompt with the current directory path
        printf("%s$ ", cwd);

        if (fgets(cmd_line, sizeof(cmd_line), stdin) == NULL) {
            break;  // End of input or error
        }

        // Remove the newline character at the end of the command
        cmd_line[strcspn(cmd_line, "\n")] = 0;

        // Execute the command
        execute_command(cmd_line);
    }

    return 0;
}